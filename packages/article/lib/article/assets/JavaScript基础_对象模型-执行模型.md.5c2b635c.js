import{_ as s,c as n,o as a,b as o}from"./app.ac902fba.js";const _=JSON.parse('{"title":"JavaScript 对象模型-执行模型","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript基础/对象模型-执行模型.md"}'),l={name:"JavaScript基础/对象模型-执行模型.md"},p=o(`<h1 id="javascript-对象模型-执行模型" tabindex="-1">JavaScript 对象模型-执行模型 <a class="header-anchor" href="#javascript-对象模型-执行模型" aria-hidden="true">#</a></h1><p><strong>基本数据类型</strong> 简单数值类型: 有Undefined, Null, Boolean, Number,symbol和String 对象: 一个无序属性的集合，这些属性的值为简单数值类型、对象或者函数 函数: 函数是对象的一种 <strong>数据类型实现模型描述</strong><img src="https://images.cnblogs.com/cnblogs_com/riccc/js/js_object_model_implementation.jpg" alt=""></p><p><strong>js对象</strong> 红色的表示Prototype链指向，Object.protptype的Prototype指向了null <img src="https://images.cnblogs.com/cnblogs_com/riccc/js/js_object_model.jpg" alt=""></p><p><strong>作用域链</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> outerVar1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">variable in global code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">arg2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">innerVar1</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">variable in function code</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn2</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">outerVar1</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> - </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">innerVar1</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> - </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> - </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fn2</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> outerVar2</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">fn1</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>执行处理过程大致如下:</p><ol><li>初始化Global Object即window对象，Variable Object为window对象本身。创建Scope Chain对象，假设为scope_1，其中只包含window对象。</li><li>扫描JS源代码(读入源代码、可能有词法语法分析过程)，从结果中可以得到定义的变量名、函数对象。按照扫描顺序: <ul><li>2.1 发现变量outerVar1，在window对象上添加outerVar1属性，值为undefined；</li><li>2.2 发现函数fn1的定义，使用这个定义创建函数对象，传给创建过程的Scope Chain为scope_1。将结果添加到window的属性中，名字为fn1，值为返回的函数对象。注意fn1的内部[[Scope]]就是scope_1。另外注意，创建过程并不会对函数体中的JS代码做特殊处理，可以理解为只是将函数体JS代码的扫描结果保存在函数对象的内部属性上，在函数执行时再做进一步处理。这对理解Function Code，尤其是嵌套函数定义中的Variable Instantiation很关键；</li><li>2.3 发现变量outerVar2，在window对象上添加outerVar2属性，值为undefined；</li></ul></li><li>执行outerVar1赋值语句，赋值为&quot;variable in global code&quot;。</li><li>执行函数fn1，得到返回值: <ul><li>4.1 创建Activation Object，假设为activation_1；创建一个新的Scope Chain，假设为scope_2，scope_2中第一个对象为activation_1，第二个对象为window对象(取自fn1的[[Scope]]，即scope_1中的内容)；</li><li>4.2 处理参数列表。在activation_1上设置属性arg1、arg2，值分别为10、20。创建arguments对象并进行设置，将arguments设置为activation_1的属性；</li><li>4.3 对fn1的函数体执行类似步骤2的处理过程: <ul><li>4.3.1 发现变量innerVar1，在activation_1对象上添加innerVar1属性，值为undefine；</li><li>4.3.2 发现函数fn2的定义，使用这个定义创建函数对象，传给创建过程的Scope Chain为scope_2(函数fn1的Scope Chain为当前执行上下文的内容)。将结果添加到activation_1的属性中，名字为fn2，值为返回的函数对象。注意fn2的内部[[Scope]]就是scope_2；</li></ul></li><li>4.4 执行innerVar1赋值语句，赋值为&quot;variable in function code&quot;。</li><li>4.5 执行fn2: <ul><li>4.5.1 创建Activation Object，假设为activation_2；创建一个新的Scope Chain，假设为scope_3，scope_3中第一个对象为activation_2，接下来的对象依次为activation_1、window对象(取自fn2的[[Scope]]，即scope_2)；</li><li>4.5.2 处理参数列表。因为fn2没有参数，所以只用创建arguments对象并设置为activation_2的属性。</li><li>4.5.3 对fn2的函数体执行类似步骤2的处理过程，没有发现变量定义和函数声明。</li><li>4.5.4 执行函数体。对任何一个变量引用，从scope_3上进行搜索，这个示例中，outerVar1将在window上找到；innerVar1、arg1、arg2将在activation_1上找到。</li><li>4.5.5 丢弃scope_3、activation_2(指它们可以被垃圾回收了)。</li><li>4.5.6 返回fn2的返回值。</li><li>4.6 丢弃activation_1、scope_2。</li><li>4.7 返回结果。</li></ul></li></ul></li><li>将结果赋值给outerVar2。</li></ol>`,7),e=[p];function t(r,c,i,F,D,y){return a(),n("div",null,e)}const C=s(l,[["render",t]]);export{_ as __pageData,C as default};

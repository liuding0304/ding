import{_ as s,c as a,o as n,b as l}from"./app.ac902fba.js";const e="/article/assets/image-1627617460200.e46fddac.png",p="/article/assets/image-1627628159285.bc2619a7.png",b=JSON.parse('{"title":"JavaScript中的二进制对象","description":"JavaScript中的二进制对象","frontmatter":{"title":"JavaScript中的二进制对象","description":"JavaScript中的二进制对象","open":true},"headers":[{"level":2,"title":"ArrayBuffer","slug":"arraybuffer","link":"#arraybuffer","children":[]},{"level":2,"title":"视图","slug":"视图","link":"#视图","children":[{"level":3,"title":"DataView","slug":"dataview","link":"#dataview","children":[]},{"level":3,"title":"TypedArray（定型数组）","slug":"typedarray-定型数组","link":"#typedarray-定型数组","children":[]}]},{"level":2,"title":"Blob(Binary Large Object)","slug":"blob-binary-large-object","link":"#blob-binary-large-object","children":[]},{"level":2,"title":"File","slug":"file","link":"#file","children":[]},{"level":2,"title":"FileReader","slug":"filereader","link":"#filereader","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}]},{"level":2,"title":"URL.createObjectURL","slug":"url-createobjecturl","link":"#url-createobjecturl","children":[]},{"level":2,"title":"TODO","slug":"todo","link":"#todo","children":[]}],"relativePath":"JavaScript基础/JavaScript中的二进制对象.md"}'),o={name:"JavaScript基础/JavaScript中的二进制对象.md"},r=l(`<h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-hidden="true">#</a></h2><p>ArrayBuffer 用于表示通用的、长度固定的二进制数据缓冲区。简单的说就是 ArrayBuffer 表示了一个块内存，通过 ArrayBuffer 可以操作这块内存中的二进制数据。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 开辟了一块大小为16个字节的内存</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(buf</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength) </span><span style="color:#676E95;">// 16</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ArrayBuffer 属性和方法</p><ul><li>属性 length: ArrayBuffer 构造函数的 length 属性，其值为 1。</li><li>方法 isView(arg): 判断是否为视图实例，参数为 TypedArray 和 DataView 的实例时，会返回 true。（TypedArray 和 DataView 用于操作 ArrayBuffer）</li><li>方法 transfer(buffer, [, length]): 返回新的 ArrayBuffer 对象，内容取自 buffer 中的数据，数据会根据 length 的大小进行截取或补 0。</li></ul><p>实例属性和方法：</p><ul><li><p>方法 slice(begin[, end]): 根据 begin 和 end 返回新的 ArrayBuffer。</p></li><li><p>byteLength ： 返回 ArrayBuffer， 单位为 byte</p></li><li><p>buffer： 被描述的 ArrayBuffer 实例</p></li><li><p>byteOffset: 描述的 ArrayBuffer 的偏移量</p></li></ul><p>可以看到 ArrayBuffer 的属性和方法比较少，并且都没有读写的 API，那我们要怎么去操作 ArrayBuffer 呢？ 其实 ArrayBuffer 是不能直接操作，需要通过视图才能够操作。</p><h2 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-hidden="true">#</a></h2><h3 id="dataview" tabindex="-1">DataView <a class="header-anchor" href="#dataview" aria-hidden="true">#</a></h3><p>DataView 视图是用与操作 ArrayBuffer 对象的接口</p><h4 id="语法" tabindex="-1">语法： <a class="header-anchor" href="#语法" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataView</span><span style="color:#A6ACCD;">(buffer [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> byteOffset [</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> byteLength]])</span></span>
<span class="line"><span style="color:#676E95;">// buffer：ArrayBuffer实例</span></span>
<span class="line"><span style="color:#676E95;">// byteOffset: 视图对象在buffer中的偏移量，默认第一个开始</span></span>
<span class="line"><span style="color:#676E95;">// byteLength: 视图的长度</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 视图可以只描述buffer实例其中一部分数据，</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="简单使用" tabindex="-1">简单使用： <a class="header-anchor" href="#简单使用" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataView</span><span style="color:#A6ACCD;">(buf)</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInt16</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">231</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// 从ArrayBuffer的第一个字节开始写入一个16位（2个字节）的int数据，值为231</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInt16</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// =&gt; 231  在ArrayBuffer中从第一个字节开始按16位的int类型读取数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意点：设置数据和读取数据时，可以自定义字节序，默认为大端字节序。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DataView</span><span style="color:#A6ACCD;">(buf)</span></span>
<span class="line"><span style="color:#676E95;">// 将304按小端字节序存储，</span></span>
<span class="line"><span style="color:#676E95;">// 304的二进制是 00000001 00110000</span></span>
<span class="line"><span style="color:#676E95;">// 小端存储的结果是 00110000 00000001</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInt16</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">304</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// 按小端读取: 431</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInt16</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;">// 按大端读取值为12289</span></span>
<span class="line"><span style="color:#A6ACCD;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInt16</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// 12289</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>DataView 不仅有 Int16 的 API，还有许多可以在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">MDN 查询</a></p><h3 id="typedarray-定型数组" tabindex="-1">TypedArray（定型数组） <a class="header-anchor" href="#typedarray-定型数组" aria-hidden="true">#</a></h3><p>TypedArray 也是用于操作 ArrayBuffer。不过并没有 TypedArray 的全局属性。一般所说的 TypedArray 是指它的实例：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array</p><h4 id="语法-1" tabindex="-1">语法： <a class="header-anchor" href="#语法-1" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// 1. 传入length, 会自动创建对应长度的ArrayBuffer，Int16是两个字节，长度为2，因此这里创建的ArrayBuffer长度为4个字节</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int16 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int16Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">int16</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength </span><span style="color:#676E95;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 2. 传入ArrayBuffer</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> buf </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int16 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int16Array</span><span style="color:#A6ACCD;">(buf) </span><span style="color:#676E95;">// new TypedArray(buffer [, byteOffset [, length]]);</span></span>
<span class="line"><span style="color:#A6ACCD;">int16</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#676E95;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 3. 传入TypedArray会复制一个新的TypedArray，新的长度不会变，每个值在被复制到新的数组之前，会被转化为相应类型的构造函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int16 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int16Array</span><span style="color:#A6ACCD;">(int32)</span></span>
<span class="line"><span style="color:#A6ACCD;">int16</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#676E95;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 4. 传入数组，会把数据当成数据自动创建ArrayBuffer，</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">int32</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#676E95;">// 2</span></span>
<span class="line"><span style="color:#A6ACCD;">int32</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">byteLength </span><span style="color:#676E95;">// 8 ，数据长度为2，一条数据占32位（4个字节）因此长度就是2*8</span></span>
<span class="line"><span style="color:#A6ACCD;">int32[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;">// 31</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 5. 通过from方法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Int32Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// 6. 通过of方法，和from的区别在与参数不同</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Int32Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">21</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>TypedArray 的使用非常类似数组，可以通过下标取值赋值，能使用的方法和属性也类似（length、every、forEach 等等），具体可以在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">MDN 上查询</a>, ArrayBuffer 是不支持动态调整大小的，会修改数组大小的方法都不能使用：push、concat、pop、shift、splice、unshift。</p><p>set 方法: 把提供过的数组或定型数组复制到指定的位置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">int32</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">int32</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(Int32Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">int32 </span><span style="color:#676E95;">// Int32Array(8) [1, 2, 3, 4, 5, 0, 0, 0]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>subarray 方法：从定型数组中复制出一个新的定型数组</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> int32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Int32Array</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> copyInt32 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> int32</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subarray</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;">// subarray([begin [, end]])</span></span>
<span class="line"><span style="color:#A6ACCD;">copyInt32 </span><span style="color:#676E95;">// Int32Array(2) [2, 3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="blob-binary-large-object" tabindex="-1">Blob(Binary Large Object) <a class="header-anchor" href="#blob-binary-large-object" aria-hidden="true">#</a></h2><p>Blob 表示二进制类型的大对象,例如图片、音频、视频、文件。ArrayBuffer 也可以表示二进制数据，Blob 不同的是 Blob 是不可变的，不能修改 Bolb 中的二进制数据。 <img src="`+e+`" alt="enter image description here"></p><h4 id="语法-2" tabindex="-1">语法 <a class="header-anchor" href="#语法-2" aria-hidden="true">#</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// blobParts 由 ArrayBuffer，ArrayBufferView，Blob，DOMString 等对象构成的数组。DOMStrings 会被编码为 UTF-8。</span></span>
<span class="line"><span style="color:#676E95;">// options.type MIME类型</span></span>
<span class="line"><span style="color:#676E95;">// options.endings 指定包含行结束符  \`\\n\`  的字符串如何被写入，可能的值有native和transparent， 默认为transparent</span></span>
<span class="line"><span style="color:#676E95;">// native: 行结束符会被更改为适合宿主操作系统文件系统的换行符</span></span>
<span class="line"><span style="color:#676E95;">// transparent: 保持 blob 中保存的结束符不变</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myblog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#A6ACCD;">(blobParts[</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options])</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-hidden="true">#</a></h4><ul><li>size blob 的数据大小，单位为 byte</li><li>type 返回 blob 的 MIME 类型</li></ul><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-hidden="true">#</a></h4><ul><li>slice( [ start [, end [, contentType ] ] ] ) 返回包指定范围内的数据的新的 blob 对象，用这个方法可以实现文件的分片上传，将文件分成多个块并标记顺序，然后分步把每个块上传，然后服务端接受完所有块之后，按照执行的顺序将所以块合并为一个文件。</li><li>stream() 返回读取 blob 内容的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a></li><li>text() 返回一个 promise 且包含 blob 所有内容的 UTF-8 格式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/USVString" target="_blank" rel="noreferrer"><code>USVString</code></a></li><li>arrayBuffer() 返回一个 promise 且包含 blob 所有内容的二进制格式的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer"><code>ArrayBuffer</code></a></li></ul><h2 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-hidden="true">#</a></h2><p>File 继承于 Blob，它是一中特殊的 Blob，File 会通常是用户用过 input 上传后的文件，它会包括一些文件相关的信息，比如文件的最后修改时间，文件的名称等，而 Blob 是通用的二进制对象，没有包含这些与文件系统有关的信息。和 blob 一样，也可以通过<code>new File()</code>来创建一个文件对象。 <img src="`+p+`" alt="enter image description here"></p><h4 id="file-除了继承于-blob-的属性与方法" tabindex="-1">File 除了继承于 Blob 的属性与方法 <a class="header-anchor" href="#file-除了继承于-blob-的属性与方法" aria-hidden="true">#</a></h4><ul><li>lastModified 文件的最后修改时间戳</li><li>lastModifiedDate 文件最后修改时间的 Date 对象</li><li>name 文件的名字</li><li>webkitRelativePath File 相关的 path 或 URL，当上传的是一个文件夹时，这个字段表示该文件相对于文件夹的路径</li></ul><h2 id="filereader" tabindex="-1">FileReader <a class="header-anchor" href="#filereader" aria-hidden="true">#</a></h2><blockquote><p><code>FileReader</code> 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noreferrer"><code>File</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a> 对象指定要读取的文件或数据。（引自 MDN）</p></blockquote><p><code>FileReader</code>用于读取 Blob 或 File 类型的二进制数据，调用它不同的方法，会返回不同的数据类型。</p><p>读取数据的方法有：</p><ul><li><code>readAsText(blob, [encoding])</code> 返回结果为字符串</li><li>readAsDataURL(blob) 返回编码为 base64 的 data url</li><li>readAsArrayBuffer(blob) 返回二进制格式的 ArrayBuffer</li></ul><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onchange</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;">readFile</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">this</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readFile</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">file</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">files</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FileReader</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsText</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">file</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>新建 FileReader 实例后，可以用过实例的<code>read</code>系列的方法来读取数据，读取过程中，我们可以用<code>on</code>或<code>addEventListener</code>的方式监听到过程中的各个事件，读取完毕之后会触发<code>onload</code>事件，并把读取的结果放在实例的<code>result</code>属性上；读取异常会触发<code>onerror</code>事件，错误信息可以在属性<code>error</code>上获取到。读取文件的状态在属性<code>readyState</code>上</p><h4 id="读取过程中的事件" tabindex="-1">读取过程中的事件 <a class="header-anchor" href="#读取过程中的事件" aria-hidden="true">#</a></h4><ul><li><code>loadstart</code> : 开始加载。</li><li><code>progress</code> : 在读取过程中出现。</li><li><code>load</code> : 读取完成，没有 error。</li><li><code>abort</code> : 调用了 <code>abort()</code> 。</li><li><code>error</code> :出现 error。</li><li><code>loadend</code> : 读取完成，无论成功还是失败。</li></ul><p>FileReader 还提供了一个<code>abort()</code>方法，可以中断读取，中断后会触发<code>abort</code>事件,</p><h4 id="构造函数属性" tabindex="-1">构造函数属性 <a class="header-anchor" href="#构造函数属性" aria-hidden="true">#</a></h4><ul><li>FileReader.EMPTY 状态常量，值为 0，表示还没有加载任何数据</li><li>FileReader.LOADING 状态常量，值为 1，表示数据正在被加载</li><li>FileReader.DONE 状态常量，值为 2，表示已完成全部的读取请求</li></ul><h2 id="url-createobjecturl" tabindex="-1">URL.createObjectURL <a class="header-anchor" href="#url-createobjecturl" aria-hidden="true">#</a></h2><p>这里单独介绍一下<code>URL.createObjectURL</code>方法，</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// file 是用户通过input上传的一个图片</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#A6ACCD;">(file)</span></span>
<span class="line"><span style="color:#A6ACCD;">cosnt img </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> url</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>传入一个 file 或 blob 对象，会返回一个 url 地址，这个地址可以读取到传入的内容。可以用来做本地图片上传后服务器之前的预览。这个 url 和文档的生命周期是一致的，文档销毁了，url 也会生效。还可以通过<code>URL.revokeObjectURL</code>方法来主动释放该 url。</p><h2 id="todo" tabindex="-1">TODO <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2><ul><li>下节再补充 API 的应用场景</li><li>边学习边记录，会有些不足之处，立个<code>flag</code>，下次一定回来再重新看看，再更新一版</li></ul>`,58),c=[r];function t(i,y,A,C,D,F){return n(),a("div",null,c)}const u=s(o,[["render",t]]);export{b as __pageData,u as default};
